#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""
Copyright Â© 2009-2014 The Caffeine Developers

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""


import argparse
# import builtins
import gettext
import locale
import logging
import pkg_resources
import signal
import sys

from gettext import gettext as _
from gi.repository import AppIndicator3, GLib, GObject, Gtk
from os.path import abspath, dirname, exists, join, pardir
from subprocess import call, Popen, TimeoutExpired
from Xlib.display import Display

__program__ = 'caffeine-indicator'
__description__ = 'Toggle desktop idleness inhibition.'
__version__ = pkg_resources.require('caffeine')[0].version


class Caffeine(GObject.GObject):
    def __init__(self):
        GObject.GObject.__init__(self)
        self.process = None
        self.root = Display().screen().root
        self.status_string = None
        self.window = None

    @property
    def get_activated(self):
        return self.window is not None

    def inhibit(self):
        if OPTIONS.auto_toggle:
            args = ['caffeine'] + (
                ['--quiet'] if OPTIONS.quiet else ['--align'] +
                (['--timestamp'] if OPTIONS.timestamp else []))
            self.process = Popen(args)
            self.status_string = _('started caffeine [%s]' % self.process.pid)
        else:
            call(['caffeine-screensaver', 'suspend', self.window], timeout=5)
            self.status_string = _('inhibiting desktop idleness')

    def release(self):
        if self.get_activated:
            self.resume()
            self.window = None
            LOGGER.info(self.status_string)

    def resume(self):
        if OPTIONS.auto_toggle:
            # use SIGTERM so that caffeine will resume screensaver before exit
            self.process.terminate()

            try:
                # ensure caffeine has terminated before continuing
                self.process.wait(timeout=5)
            except TimeoutExpired:
                LOGGER.error('timed out attempting to terminate caffeine [%s]', self.process.pid)

            self.status_string = _('stopped caffeine [%s]' % self.process.pid)
        else:
            call(['caffeine-screensaver', 'resume', self.window], timeout=5)
            self.status_string = _('no longer inhibiting desktop idleness')

    def toggle_activated(self):
        if not self.get_activated:
            self.window = hex(self.root.id)
            self.inhibit()
            LOGGER.info(self.status_string)
        else:
            self.release()

        self.emit('activation-toggled', self.get_activated, self.status_string)


class GUI(object):
    def __init__(self, caffeine):
        self.caffeine = caffeine
        self.caffeine.connect('activation-toggled', self.on_activation_toggled)
        self.labels = [_('Activate'), _('Deactivate')]

        builder = Gtk.Builder()
        builder.add_from_file(join(GLADE_PATH, 'GUI.glade'))

        get = builder.get_object

        self.indicator = AppIndicator3.Indicator.new(
            'caffeine-cup-empty',
            'caffeine',
            AppIndicator3.IndicatorCategory.APPLICATION_STATUS)
        self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)

        self.activate_menuitem = get('activate_menuitem')
        self.set_icon_is_activated(self.caffeine.get_activated)

        # popup menu
        self.menu = get('popup_menu')
        self.menu.show()
        self.indicator.set_menu(self.menu)

        # about dialog
        self.about_dialog = get('aboutdialog')
        self.about_dialog.set_version(__version__)
        self.about_dialog.set_translator_credits(_('translator-credits'))

        builder.connect_signals(self)

    def on_activation_toggled(self, source, active, tooltip):
        self.set_icon_is_activated(active)

    def set_icon_is_activated(self, activated):
        # toggle the icon, indexing with a bool
        icon_name = ['caffeine-cup-empty', 'caffeine-cup-full'][activated]
        self.indicator.set_icon(icon_name)
        self.activate_menuitem.set_label(self.labels[self.caffeine.get_activated])

    def on_activate_menuitem_activate(self, menuitem, data=None):
        # menu callbacks
        self.caffeine.toggle_activated()
        menuitem.set_label(self.labels[self.caffeine.get_activated])

    def on_about_menuitem_activate(self, menuitem, data=None):
        self.about_dialog.set_position(Gtk.WindowPosition.CENTER_ALWAYS)
        self.about_dialog.run()
        self.about_dialog.hide()

    def on_quit_menuitem_activate(self, menuitem, data=None):
        # ensure desktop idleness is uninhibited upon exit
        self.caffeine.release()
        Gtk.main_quit()


def get_base_path():
    path = abspath(dirname(__file__))

    while path != '/':
        path = abspath(join(path, pardir))

        if exists(join(path, 'share', __program__)):
            return path

    raise Exception('Unable to determine BASE_PATH')


# adapted from http://stackoverflow.com/questions/26388088/python-gtk-signal-handler-not-working
def init_signal(gui):
    def signal_action(sig):
        CAFFEINE.release()
        sys.exit(1)

    def idle_handler(*args):
        GLib.idle_add(signal_action, priority=GLib.PRIORITY_HIGH)

    def handler(*args):
        signal_action(args[0])

    def install_glib_handler(sig):
        # GLib.unix_signal_add was added in glib 2.36
        GLib.unix_signal_add(GLib.PRIORITY_HIGH, sig, handler, sig)

    for sig in [signal.SIGINT, signal.SIGTERM, signal.SIGHUP]:
        signal.signal(sig, idle_handler)
        GLib.idle_add(install_glib_handler, sig, priority=GLib.PRIORITY_HIGH)


# register the gettext function for the whole interpreter as "_"
# builtins._ = gettext.gettext

BASE_PATH = get_base_path()
GLADE_PATH = join(BASE_PATH, 'share', __program__, 'glade')

# set up translations
LOCALE_PATH = join(BASE_PATH, 'share', 'locale')

locale.setlocale(locale.LC_ALL, '')

for module in locale, gettext:
    module.bindtextdomain(__program__, LOCALE_PATH)
    module.textdomain(__program__)

PARSER = argparse.ArgumentParser(
    add_help=False,
    description=__description__,
    prog=__program__,
    usage='%(prog)s [-a]')
PARSER.add_argument(
    '-a', '--auto',
    action='store_true',
    dest='auto_toggle',
    help='prevent desktop idleness in fullscreen mode')
PARSER.add_argument(
    '-h', '--help',
    action='help',
    help=argparse.SUPPRESS)
PARSER.add_argument(
    '-q', '--quiet',
    action='store_true',
    dest='quiet',
    help='silence normal output')
PARSER.add_argument(
    '-t', '--timestamp',
    action='store_true',
    dest='timestamp',
    help='timestamp log entries')
PARSER.add_argument(
    '-V', '--version',
    action='version',
    version=__program__ + ' ' + __version__)

OPTIONS = PARSER.parse_args()

# set up logging
STR = '(%(name)s) %(levelname)s: %(message)s'

if OPTIONS.timestamp:
    FMT = ['%(asctime)s.%(msecs)03d ' + STR, '%Y-%m-%d %H:%M:%S']
else:
    FMT = [STR]

LOGGER = logging.getLogger(__program__)
STREAM = logging.StreamHandler()
FORMAT = logging.Formatter(*FMT)
STREAM.setFormatter(FORMAT)
LOGGER.addHandler(STREAM)

if not OPTIONS.quiet:
    LOGGER.setLevel(logging.INFO)

# # set up logging
# LOGGER = logging.getLogger(__program__)
# STREAM = logging.StreamHandler()
# FORMAT = logging.Formatter('%(levelname)s:%(name)s: %(message)s')
# STREAM.setFormatter(FORMAT)
# LOGGER.addHandler(STREAM)
# LOGGER.setLevel(logging.WARNING if OPTIONS.quiet else logging.INFO)

GObject.signal_new(
    'activation-toggled',
    Caffeine,
    GObject.SignalFlags.RUN_FIRST,
    None,
    [bool, str])
GObject.threads_init()

CAFFEINE = Caffeine()
init_signal(GUI(CAFFEINE))
Gtk.main()

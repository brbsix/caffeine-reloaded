#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""
Copyright Â© 2009-2015 The Caffeine Developers

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""


# stdlib imports
import argparse
import logging
import signal
import sys
import time
from subprocess import call
from threading import Event, Thread

# third-party imports
from ewmh import EWMH as EWMH_CLASS
from pkg_resources import get_distribution
from Xlib.display import Display

__program__ = 'caffeine'
__description__ = 'Prevent desktop idleness in fullscreen mode.'
__version__ = get_distribution('caffeine-reloaded').version


class Caffeine:

    """Inhibit the screensaver when the active window is in fullscreen mode."""

    def __init__(self):
        self.activated = False
        self.root_id = hex(DISPLAY.screen().root.id)
        self.timer = RepeatedTimer(get_timeout(), self.execute)

    def execute(self):
        """Check for an active fullscreen window and respond appropriately."""

        fullscreen = is_fullscreen()

        # if inhibition state has changed, take action
        if self.activated != fullscreen:
            if fullscreen:
                self.inhibit()
            else:
                self.resume()

        return True

    def inhibit(self):
        """Inhibit the screensaver."""

        self.activated = True
        LOGGER.info('inhibiting desktop idleness')
        call(['caffeine-screensaver', 'suspend', self.root_id])

    def resume(self):
        """Resume the screensaver after being suspended."""

        if self.activated:
            self.activated = False
            LOGGER.info('no longer inhibiting desktop idleness')
            call(['caffeine-screensaver', 'resume', self.root_id])

    def stop(self):
        """Stop caffeine."""

        self.timer.stop()
        self.resume()


class RepeatedTimer:  # pylint: disable=too-few-public-methods

    """Repeat `function` every `interval` seconds."""

    def __init__(self, interval, function):
        self.interval = interval
        self.function = function
        self.start = time.time()
        self.event = Event()
        self.thread = Thread(target=self._target)
        self.thread.start()

    def _target(self):
        """Loop to block until timeout occurs then execute function."""
        while not self.event.wait(self._time):
            self.function()

    @property
    def _time(self):
        """Determine wait time in seconds."""
        return self.interval - ((time.time() - self.start) % self.interval)

    def stop(self):
        """Stop timer."""
        self.event.set()
        self.thread.join()


def get_timeout():
    """Determine the program's timeout interval in seconds."""

    # seconds = DISPLAY.get_screen_saver().interval
    seconds = DISPLAY.get_screen_saver().timeout

    LOGGER.info('screen saver timeout = %d s', seconds)

    # default to 60s if screensaver is off otherwise use t minus 10s
    interval = (seconds - 10) if seconds > 10 else 60

    LOGGER.info('timer interval = %d s', interval)

    return interval


def init_signals(caffeine):
    """Catch signals to stop caffeine before exiting."""

    def signal_action(signum, frame):  # pylint: disable=unused-argument
        """To be executed upon exit signal."""
        caffeine.stop()
        sys.exit(1)

    # catch signals and handle appropriately
    for sig in [signal.SIGINT, signal.SIGTERM, signal.SIGHUP]:
        signal.signal(sig, signal_action)

    # stay on the main thread to receive signal
    signal.pause()


def is_fullscreen():
    """Check whether active window is fullscreen."""

    from Xlib.error import BadWindow

    window = EWMH.getActiveWindow()

    # getActiveWindow() will sometimes return None
    if window is None:
        return False

    try:
        return '_NET_WM_STATE_FULLSCREEN' in EWMH.getWmState(window, str=True)
    except BadWindow:
        return False


PARSER = argparse.ArgumentParser(
    add_help=False,
    description=__description__,
    prog=__program__,
    usage='%(prog)s [OPTION]...')
PARSER.add_argument(
    '--align',
    action='store_true',
    dest='align',
    help=argparse.SUPPRESS)
PARSER.add_argument(
    '-h', '--help',
    action='help',
    help=argparse.SUPPRESS)
PARSER.add_argument(
    '-q', '--quiet',
    action='store_true',
    dest='quiet',
    help='suppress normal output')
PARSER.add_argument(
    '-t', '--timestamp',
    action='store_true',
    dest='timestamp',
    help=argparse.SUPPRESS)
PARSER.add_argument(
    '-V', '--version',
    action='version',
    version='%(prog)s ' + __version__)

OPTIONS = PARSER.parse_args()

# set up logging
LOGGER = logging.getLogger(__program__)
STREAM = logging.StreamHandler()
FORMAT = logging.Formatter(
    '%(asctime)s.%(msecs)03d (%(name)s)' +
    ' ' * (11 if OPTIONS.align else 1) +
    '%(levelname)s: %(message)s',
    '%Y-%m-%d %H:%M:%S')
STREAM.setFormatter(FORMAT)
LOGGER.addHandler(STREAM)

if not OPTIONS.quiet:
    LOGGER.setLevel(logging.INFO)

DISPLAY = Display()
EWMH = EWMH_CLASS()

init_signals(Caffeine())
